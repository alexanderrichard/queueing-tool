#!/usr/bin/python3

import socket, argparse, re
from scheduler import Scheduler, Job
from typing import List, Tuple


class Server(object):

    def __init__(self, port: int, gpus: List[Tuple[int, bool]], threads: int, memory: int, abort_on_time_limit: bool):
        # socket
        self.listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.listener.bind(('localhost', port))
        # running job id
        self.next_job_id = 1
        self.scheduler = Scheduler(gpus, threads, memory, abort_on_time_limit)
        self.scheduler.on_job_start_callback = self.on_job_start_callback

    def on_job_start_callback(self, job: Job):
        msg = 'run:' + ','.join([str(i.cuda_id) for i in job.gpus])
        self.send_msg(msg, job.address)

    def send_msg(self, msg: str, address: str):
        try:  # if client can not be reached assume it crashed 

            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect(address)
            sock.sendall(msg.encode())
            sock.close()

        except Exception as e:
            pass

    def add_job(self, job_request: str) -> str:
        fields = job_request.split(',')
        job_id = int(fields[0])
        address = (fields[1], int(fields[2]))
        name = fields[3]
        threads = int(fields[4])
        memory = int(fields[5])
        n_gpus = int(fields[6])
        hours = int(fields[7])
        user = fields[8]
        depends_on = []
        if len(fields[9]) > 0:
            depends_on = [int(i) for i in fields[9].split('+')]
        job = Job(job_id, address, n_gpus, threads, memory, hours, name, user, depends_on)
        job_accepted = self.scheduler.submit_job(job_id, job)
        return 'accept' if job_accepted else 'requested resources exceed resources reserved for the queue'

    def qinfo(self, connection: socket.socket):
        msg = 'Used resources:\n' \
              + 'threads: ' + str(self.scheduler.resources.threads - self.scheduler.free_resources.threads) + '/' + str(
            self.scheduler.resources.threads) + '\n' \
              + 'memory:  ' + str(self.scheduler.resources.memory - self.scheduler.free_resources.memory) + '/' + str(
            self.scheduler.resources.memory) + '\n' \
              + 'gpus:    ' + str(self.scheduler.gpu_tree.total() - self.scheduler.gpu_tree.free) + '/' + str(
            self.scheduler.gpu_tree.total())
        connection.sendall(msg.encode())

    def qstat(self, connection: socket.socket, verbose=False):
        for job_id in sorted(self.scheduler.running_jobs):
            connection.sendall((self.scheduler.jobs[job_id].to_string(job_id, 'r', verbose)).encode())
            connection.recv(1024).decode()  # wait for feedback
        for job_id in sorted(self.scheduler.waiting_jobs):
            connection.sendall((self.scheduler.jobs[job_id].to_string(job_id, 'w', verbose)).encode())
            connection.recv(1024).decode()  # wait for feedback
        for job_id in sorted(self.scheduler.held_jobs):
            connection.sendall((self.scheduler.jobs[job_id].to_string(job_id, 'h', verbose)).encode())
            connection.recv(1024).decode()  # wait for feedback

    def qdel(self, connection: socket.socket):
        try:
            message = ':'

            connection.sendall(message.encode())

            while True:
                msg = connection.recv(1024).decode()

                assert msg != ''

                specifier = msg.split(':')[0]
                to_delete = re.sub('\*', '.*', msg.split(':')[1])
                user = msg.split(':')[2]
                joblist = self.scheduler.find_jobs(specifier, to_delete)

                # delete jobs
                if len(joblist) == 0:
                    message = f'no job with {specifier} {to_delete} found'
                    connection.sendall(message.encode())
                    connection.recv(1024).decode()  # wait for acknowledgement by client

                for job_id in sorted(joblist):
                    if (user == 'root') or (user == self.scheduler.jobs[job_id].user):

                        message = f'delete job {job_id} ({self.scheduler.jobs[job_id].name})'
                        connection.sendall(message.encode())
                        connection.recv(1024).decode()  # wait for acknowledgement by client

                        self.send_msg('delete', self.scheduler.jobs[job_id].address)
                        self.scheduler.delete_job(job_id, False)
                    else:

                        message = f'delete job {job_id} ({self.scheduler.jobs[job_id].name}): permission denied'
                        connection.sendall(message.encode())
                        connection.recv(1024).decode()  # wait for acknowledgement by client

                message = ':'
                connection.sendall(message.encode())

        except Exception as e:
            self.scheduler.schedule()

    def handle_connection(self, connection: socket.socket):
        try:
            # receive data
            msg = connection.recv(1024).decode()

            # handle data
            if (msg[0:7] == 'timeout') and self.scheduler.abort_on_time_limit:  # timeout

                job_id = int(msg[8:])
                self.send_msg('timeout', self.scheduler.jobs[job_id].address)
                self.scheduler.delete_job(job_id)
            elif msg[0:7] == 'request':  # request

                reply = self.add_job(msg[8:])
                connection.sendall(reply.encode())
            elif msg[0:8] == 'finished':  # job finished

                job_id = int(msg[9:])
                if job_id in self.scheduler.jobs:
                    self.send_msg('finished', self.scheduler.jobs[job_id].address)
                    self.scheduler.delete_job(job_id)
            elif msg == 'get_id':  # request job id

                connection.sendall(str(self.next_job_id).encode())
                self.next_job_id = max(1, (self.next_job_id + 1) % 10000000)
            elif msg == 'qdel':  # delete job

                self.qdel(connection)
            elif msg[0:5] == 'qstat':  # print queue

                verbose = True if msg.split(':')[1] == 'verbose' else False
                self.qstat(connection, verbose)
            elif msg == 'qinfo':  # print resource information

                self.qinfo(connection)
        except Exception as e:
            return

    def run(self):
        self.listener.listen(1)
        while True:
            try:
                connection, client_address = self.listener.accept()
                self.handle_connection(connection)
                connection.close()
            except:
                pass


def main():
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument('--port', type=int, default=1234, help='port to listen on')
    arg_parser.add_argument('--gpus', type=str, default='', help='comma separated list of available gpu device ids')
    arg_parser.add_argument('--ignore_gpus', type=str, default='',
                            help='comma separated list of externally reserved gpu device ids')
    arg_parser.add_argument('--threads', type=int, default=8, help='number of available threads/cores')
    arg_parser.add_argument('--memory', type=int, default=4096, help='available main memory in mb')
    arg_parser.add_argument('--abort_on_time_limit', action='store_true', help='kill jobs if time limit is exceeded')
    args = arg_parser.parse_args()

    gpus = []
    if not args.gpus == '':
        gpus = [(int(i), False) for i in args.gpus.split(',')]
    if not args.ignore_gpus == '':
        gpus += [(int(i), True) for i in args.ignore_gpus.split(',')] # Add GPUs that shall be ignored/marked as reserved when scheduling.
    server = Server(args.port, gpus, args.threads, args.memory, args.abort_on_time_limit)
    server.run()


if __name__ == '__main__':
    main()
